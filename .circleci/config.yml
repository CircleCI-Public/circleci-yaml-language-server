version: 2.1

# Expected environment variables:
#
# GITHUB_TOKEN:
#   Github token with "repo" rights on the project.
#   Used for release
#
# RELEASE_DOCUMENTATION_URL:
#   URL of the release documentation
#
# SLACK_RELEASE_CHANNEL:
#   ID of the slack channel on which release notification should be published
#

parameters:
  GHA_Event:
    type: string
    default: ""
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""
orbs:
    go: circleci/go@1.7.1
    node: circleci/node@5.0.2
    snyk: snyk/snyk@1.4.0
    slack: circleci/slack@4.12.1
    github-cli: circleci/github-cli@2.2.0

commands:
    install-zig:
        steps:
            - run: uname -a
            - run:
                  wget https://ziglang.org/download/0.9.1/zig-linux-x86_64-0.9.1.tar.xz
            - run: tar -xf zig-linux-x86_64-0.9.1.tar.xz

    install-vscode-extensions-deps:
        steps:
            - node/install-packages:
                  app-dir: ~/project/editors/vscode
                  pkg-manager: yarn

    install-e2e-tests-deps:
        steps:
            - node/install-packages:
                  app-dir: ~/project
                  pkg-manager: yarn

    notify-success:
      parameters:
        title:
          type: string
        content:
          type: string
      steps:
        - slack/notify:
            channel: $SLACK_RELEASE_CHANNEL
            event: pass
            custom: |
              {
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "<< parameters.title >>",
                      "emoji": true
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "<< parameters.content >>"
                    }
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "Open pipeline :external_link:",
                          "emoji": true
                        },
                        "url": "https://app.circleci.com/pipelines/<< pipeline.project.type >>/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/<< pipeline.number >>"
                      },
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "Open release :external_link:",
                          "emoji": true
                        },
                        "url": "https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases/tag/$CIRCLE_TAG"
                      },
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "Documentation :book:",
                          "emoji": true
                        },
                        "url": "$RELEASE_DOCUMENTATION_URL"
                      }
                    ]
                  }
                ]
              }

    notify-failure:
      parameters:
        title:
          type: string
        content:
          type: string
      steps:
        - slack/notify:
            channel: $SLACK_RELEASE_CHANNEL
            event: fail
            custom: |
              {
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "<< parameters.title >>",
                      "emoji": true
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "<< parameters.content >>"
                    }
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "Open pipeline :external_link:",
                          "emoji": true
                        },
                        "url": "https://app.circleci.com/pipelines/<< pipeline.project.type >>/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/<< pipeline.number >>"
                      },
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "Open release :external_link:",
                          "emoji": true
                        },
                        "url": "https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases/tag/$CIRCLE_TAG"
                      },
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "Documentation :book:",
                          "emoji": true
                        },
                        "url": "$RELEASE_DOCUMENTATION_URL"
                      }
                    ]
                  }
                ]
              }

jobs:
    Unit Tests:
        environment:
            SCHEMA_LOCATION: /home/circleci/project/schema.json
        docker:
            - image: cimg/go:1.19.1
        parallelism: 5
        steps:
            - checkout
            - go/mod-download-cached
            - run:
                name: Installing JUnit reporter
                command: go install github.com/jstemmer/go-junit-report/v2@latest
            - run:
                name: Running tests
                command: go test -v 2>&1 $(go list ./... | circleci tests split --split-by=timings) | go-junit-report -set-exit-code > report.xml
            - store_test_results:
                path: report.xml

    Build Linux:
        docker:
            - image: cimg/go:1.19.1
        steps:
            - checkout
            - install-zig
            - run:
                  name: Build for Linux Amd 64
                  command:
                      sh -c "go build `~/project/scripts/ldflags.sh` -o ~/project/bin/linux-amd64-lsp ./cmd/start_server/start_server.go"

            - when:
                condition:
                    or:
                        - equal: [ main, << pipeline.git.branch >> ]
                        - matches: 
                            pattern: "^hotfix.*"
                            value: << pipeline.git.branch >>
                steps:
                    - run:
                        name: Build for Linux Arm 64
                        command: |
                            export LDFLAGS=$(~/project/scripts/ldflags.sh)
                            export CGO_ENABLED=1
                            export GOOS=linux
                            export GOARCH=arm64
                            export CC='zig cc -target aarch64-linux'
                            export CXX='zig c++ -target aarch64-linux'
                            export PATH="$(pwd)/zig-linux-x86_64-0.9.1:$PATH"
                            sh -c "go build $LDFLAGS -o ~/project/bin/linux-arm64-lsp ./cmd/start_server/start_server.go"

            - run:
                name: Copy schema.json into bin/ directory
                command: cp ~/project/schema.json ~/project/bin

            - store_artifacts:
                  path: ~/project/bin

            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/bin

    Build MacOS:
        macos:
            xcode: 14.0.1
        environment:
            HOMEBREW_NO_AUTO_UPDATE: 1
        steps:
            - checkout
            - run: brew install golang
            - run: brew install zig
            - run:
                  name: Build for mac os intel
                  command:
                      sh -c "go build `~/project/scripts/ldflags.sh` -o ~/project/bin/darwin-amd64-lsp ./cmd/start_server/start_server.go"
            - run:
                  name: Build for macos arm64
                  command: |
                      export LDFLAGS=$(SUFFIX='-s -w' ~/project/scripts/ldflags.sh)
                      export CGO_ENABLED=1
                      export GOOS=darwin
                      export GOARCH=arm64
                      export FRAMEWORKS="$(xcrun --show-sdk-path)/System/Library/Frameworks"
                      export CC="zig cc -target aarch64-macos -F$FRAMEWORKS"
                      export CXX="zig c++ -target aarch64-macos -F$FRAMEWORKS"
                      sh -c "go build $LDFLAGS -o ~/project/bin/darwin-arm64-lsp ./cmd/start_server/start_server.go"

            - store_artifacts:
                  path: ~/project/bin

            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/bin

    Build Windows:
        docker:
            - image: cimg/go:1.19.1
        steps:
            - checkout
            - install-zig

            - run:
                  name: Build for Windows x86_64 (64 bits)
                  command: |
                      export LDFLAGS=$(~/project/scripts/ldflags.sh)
                      export CGO_ENABLED=1
                      export GOOS=windows
                      export GOARCH=amd64
                      export CC='zig cc -target x86_64-windows'
                      export CXX='zig c++ -target x86_64-windows'
                      export PATH="$(pwd)/zig-linux-x86_64-0.9.1:$PATH"
                      sh -c "go build $LDFLAGS -o ~/project/bin/windows-amd64-lsp.exe ./cmd/start_server/start_server.go"

            - store_artifacts:
                  path: ~/project/bin

            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/bin

    Build VSIX:
        docker:
            - image: cimg/node:18.16
        steps:
            - checkout
            - attach_workspace:
                  at: ~/

            - install-vscode-extensions-deps

            - run: cp schema.json editors/vscode
            - run: cp publicschema.json editors/vscode

            - run: cp -R bin editors/vscode/bin
            - run:
                  name: Build VSIX
                  command: |
                      # (yes ||:) forces command "yes" to exit with exit code 0 (if you don't do this it will exit with code 141)
                      cd editors/vscode && (yes ||:) | npm run vsix-ci

            - run: mkdir /tmp/vsix/

            - run:
                  name: Move VSIX to tmp
                  command:
                      mv editors/vscode/circleci-language-server-*.vsix
                      /tmp/vsix/

            - run:
                  name: ZIP VSIX
                  command: cd /tmp && zip -r circleci-lsp-vsix.zip vsix

            - store_artifacts:
                  path: /tmp/circleci-lsp-vsix.zip

    Lint:
        docker:
            - image: cimg/go:1.19.1
        steps:
            - checkout
            - node/install:
                node-version: '18'
            - node/install-yarn
            - install-vscode-extensions-deps
            - install-e2e-tests-deps
            - run:
                name: Linter check for Go
                command: if [[ $(gofmt -l pkg | wc -c) -ne 0 ]]; then exit 1; fi
            - run:
                name: Linter check for VSCE extension
                command: cd editors/vscode && npm run lint-check
            - run:
                name: "Linter check for E2E test"
                command: npm run lint:e2e

    Lint PR title:
      docker:
        - image: cimg/node:18.16
      steps:
        - github-cli/install
        - node/install-yarn
        - checkout
        - run:
            name: Install dependencies
            command: yarn
        - run:
            name: Lint PR title
            command: gh pr view --json title --jq .title | npx commitlint

    Prepare release:
      docker:
        - image: cimg/node:lts
      steps:
        - run:
            name: "Creating/updating Release PR"
            command: |
                npx release-please release-pr \
                    --token $GITHUB_TOKEN \
                    --repo-url $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME \
                    --target-branch $CIRCLE_BRANCH \
                    --config-file .circleci/release/release-please-config.json \
                    --manifest-file .circleci/release/release-please-manifest.json

    Github Release:
      docker:
        - image: cimg/node:lts
      steps:
        - run:
            name: "Releasing"
            command: |
              npx release-please github-release \
                --draft \
                --token $GITHUB_TOKEN \
                --repo-url $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME \
                --target-branch $CIRCLE_BRANCH \
                --config-file .circleci/release/release-please-config.json \
                --manifest-file .circleci/release/release-please-manifest.json

    Pre-Release:
        docker:
            - image: cimg/go:1.19.3
        steps:
            - checkout
            - attach_workspace:
                  at: ~/
            - run:
                name: Install ghr
                command: go install github.com/tcnksm/ghr@latest
            - run:
                name: Clone the public repo
                command: |
                    REPO_PATH=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
                    git clone https://${GITHUB_TOKEN}@github.com/$REPO_PATH.git /tmp/to-deploy
            - run:
                name: Set global user git config
                command: |
                    git config --global user.name "CircleCI"
                    git config --global user.email "developer_experience@circleci.com"
            - run:
                name: Publish the binaries
                command: |
                    set -ex
                    cd /tmp/to-deploy
                    cp ~/project/schema.json ~/project/bin
                    export TAG=$(cd ~/project && go run ~/project/scripts/get_next_release.go)
                    ghr -name v$TAG -prerelease -delete -replace -c `git rev-parse HEAD` $TAG ~/project/bin/

    Upload artifacts:
        docker:
            - image: cimg/base:stable
        steps:
            - github-cli/install
            - attach_workspace:
                at: ~/
            - run:
                name: Uploading to GitHub Release
                command: |
                    GITHUB_REPO_URL=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
                    for FILE in *; do
                        gh release upload --repo $GITHUB_REPO_URL $CIRCLE_TAG "$FILE"
                    done
                    gh release edit --repo $GITHUB_REPO_URL $CIRCLE_TAG --draft=false

            - notify-success:
                title: ":rocket: CircleCI YAML Language Server v$CIRCLE_TAG released"
                content: >-
                    A new release has been published.\n\n> :github: *Project*:
                    <https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME|CircleCI YAML Language Server>\n> :rocket: *Release*:
                    <https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases/tag/$CIRCLE_TAG|v$CIRCLE_TAG>
                    \n>:circleci: *Pipeline*: <https://app.circleci.com/pipelines/<<
                    pipeline.project.type >>/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/<<
                    pipeline.number >>|<< pipeline.number >>>\n>:pass-build: *Build*:
                    <$CIRCLE_BUILD_URL|$CIRCLE_BUILD_NUM>\n\nYou can <$RELEASE_DOCUMENTATION_URL|read documentation>
                    to find more about release and publish process.

            - notify-failure:
                title: ":rocket: CircleCI YAML Language Server v$CIRCLE_TAG released"
                content: >-
                    An error occurred during the release.\n\n> :github: *Project*:
                    <https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME|CircleCI YAML Language Server>\n> :rocket: *Release*:
                    <https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases/tag/$CIRCLE_TAG|v$CIRCLE_TAG>\n>:circleci:
                    *Pipeline*: <https://app.circleci.com/pipelines/<< pipeline.project.type
                    >>/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/<< pipeline.number >>|<<
                    pipeline.number >>>\n>:fail-build: *Build*: <$CIRCLE_BUILD_URL|$CIRCLE_BUILD_NUM>\n\nError logs can be found on
                    <$CIRCLE_BUILD_URL|the build>\n\nYou can <$RELEASE_DOCUMENTATION_URL|read documentation>
                    to find more about release and publish process.

            - store_artifacts:
                name: Saving bin files
                path: bin
                destination: .

    Security Scan release:
        docker:
            - image: cimg/go:1.19.1
        steps:
            - checkout
            - run:
                name: Setup Scanning
                command: |
                    git config --global url."https://$GITHUB_USER:$GITHUB_TOKEN@github.com/circleci/".insteadOf "https://github.com/circleci/"
            - snyk/scan:
                        fail-on-issues: false
                        severity-threshold: high
                        monitor-on-build: true
                        project: '${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}'

    Security Scan feature:
        docker:
            - image: cimg/go:1.19.1
        steps:
            - checkout
            - run:
                name: Setup Scanning
                command: |
                    git config --global url."https://$GITHUB_USER:$GITHUB_TOKEN@github.com/circleci/".insteadOf "https://github.com/circleci/"
            - snyk/scan:
                fail-on-issues: false
                severity-threshold: high
                monitor-on-build: false
                project: '${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}'

    E2E Tests:
      docker:
        - image: cimg/node:16.18.1
      environment:
        RPC_SERVER_BIN: ~/project/bin/linux-amd64-lsp
        PORT: 10001
      parallelism: 5
      steps:
        - checkout
        - attach_workspace:
                at: ~/
        - node/install-yarn
        - install-e2e-tests-deps
        - run:
            name: Running tests
            command: yarn test:e2e:ci
        - store_test_results:
            path: reports

workflows:
    Build and release:
        jobs:
            - Unit Tests
            - Lint:
                filters:
                  branches:
                    ignore: &release-branches
                        - main
                        - /^hotfix.*/
            - Security Scan release:
                name: Security Scan (main/hotfix)
                filters:
                  branches:
                    only: *release-branches
                context:
                    - devex-release
                    - org-global-employees
            - Security Scan feature:
                name: Security Scan (feature)
                filters:
                  branches:
                    ignore: *release-branches
                context:
                    - devex-release
                    - org-global-employees
            - Build Linux
            - Build MacOS:
                filters:
                  branches:
                    only: *release-branches
            - Build Windows:
                filters:
                  branches:
                    only: *release-branches
            - Build VSIX:
                requires:
                    - Build Linux
                    - Build MacOS
                    - Build Windows
                filters:
                    branches:
                        only: *release-branches
            - E2E Tests:
                requires:
                    - Build Linux
            - Pre-Release:
                filters:
                    branches:
                        only: *release-branches
                requires:
                    - Unit Tests
                    - Build Linux
                    - Build MacOS
                    - Build Windows
                    - E2E Tests
                context:
                    - devex-release
            - Github Release:
                filters:
                  branches:
                    only: *release-branches
                context:
                    - devex-release
                requires:
                    - Unit Tests
                    - Build Linux
                    - Build MacOS
                    - Build Windows
                    - E2E Tests
    
    Finalize release:
        jobs:
            - Build Linux:
                filters:
                    tags:
                        only: &release-tag /\d+\.\d+\.\d+/
            - Build MacOS:
                filters:
                    tags:
                        only: *release-tag
            - Build Windows:
                filters:
                    tags:
                        only: *release-tag
            - Upload artifacts:
                filters:
                    tags:
                        only: *release-tag
            
    Release PR:
        jobs:
            - Prepare release:
                name: Create/update release PR
                filters:
                    branches:
                        only: *release-branches
                context:
                    - devex-release

    Feature PR:
        jobs:
            - Lint PR title:
                context:
                  - devex-release